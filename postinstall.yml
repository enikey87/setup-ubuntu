---
- hosts: localhost
  vars_files:
    - vars.yml
  vars:
    git_dir: "/home/{{ my_user }}/git"
    repos:
      - name: "songsterr-web"
        url: "git@github.com:songsterr/songsterr-web.git"
      - name: "render-server-satellite"
        url: "git@github.com:songsterr/render-server-satellite.git"
      - name: "midi-generator"
        url: "git@github.com:songsterr/midi-generator.git"
      - name: "render-server"
        url: "git@github.com:songsterr/RenderServer.git"
      - name: "songsterr-infra"
        url: "git@github.com:songsterr/songsterr-infra.git"
      - name: "processor-json"
        url: "git@github.com:songsterr/songsterr-processor-json.git"
      - name: "songsterr-openapi"
        url: "git@github.com:songsterr/songsterr-openapi.git"
      - name: "songsterr-auth"
        url: "git@github.com:songsterr/songsterr-auth.git"
      - name: "temporal-worker"
        url: "git@github.com:songsterr/temporal-worker.git"
      - name: "songsterr-conductor"
        url: "git@github.com:songsterr/songsterr-conductor.git"
      - name: "opentelemetry-ts-instrumentation"
        url: "git@github.com:songsterr/opentelemetry-ts-instrumentation.git"
      - name: "authorized-keys"
        url: "git@github.com:songsterr/authorized-keys"
  tasks:
    - name: Ensure git directory exists
      become: no
      ansible.builtin.file:
        path: "{{ git_dir }}"
        state: directory
        owner: "{{ my_user }}"
        group: "{{ my_group }}"
        mode: '0755'

    - name: Clone repositories
      become: no
      ansible.builtin.git:
        repo: "{{ item.url }}"
        dest: "{{ git_dir }}/{{ item.name }}"
        accept_hostkey: yes
        key_file: "/home/{{ my_user }}/.ssh/id_rsa"
        update: yes
      environment:
        GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
      loop: "{{ repos }}"

    - name: Check if n is available
      become: no
      command: which n
      register: n_check
      ignore_errors: yes
      changed_when: false

    - name: Install n (Node.js version manager)
      become: yes
      ansible.builtin.command: npm install -g n
      args:
        creates: "/usr/local/bin/n"
      environment:
        PATH: "{{ ansible_env.PATH }}"
      when: n_check.rc != 0

    - name: Install lts Node.js version
      become: yes
      ansible.builtin.command: n lts
      args:
        creates: "/usr/local/bin/node"
      environment:
        PATH: "{{ ansible_env.PATH }}"
      when: n_check.rc != 0

    - name: Install npm dependencies for Node.js projects
      become: no
      ansible.builtin.command: npm install
      args:
        chdir: "{{ git_dir }}/{{ item.name }}"
      environment:
        PATH: "{{ ansible_env.PATH }}"
      loop: "{{ repos }}"
      when: item.name in ['songsterr-web', 'render-server-satellite', 'midi-generator']

    - name: Add ssh_config Include directive to ~/.ssh/config
      become: no
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.ssh/config"
        line: "Include {{ git_dir }}/authorized-keys/ssh_config"
        state: present
        create: yes
        mode: '0600'
      tags: ssh

    - name: Create ssh directory in authorized-keys
      become: no
      ansible.builtin.file:
        path: "{{ git_dir }}/authorized-keys/ssh"
        state: directory
        mode: '0700'
      tags: ssh

    - name: Create symbolic link for personal ssh key
      become: no
      ansible.builtin.file:
        src: "{{ ansible_env.HOME }}/.ssh/id_rsa"
        dest: "{{ ansible_env.HOME }}/.ssh/id_infra"
        state: link
        force: yes
      tags: ssh

    - name: Add local.songsterr.dev entries to /etc/hosts
      become: yes
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
        state: present
      loop:
        - "127.0.0.1 local.songsterr.dev local-static.songsterr.dev"
        - "::1 local.songsterr.dev local-static.songsterr.dev"
      tags: web

    - name: Allow Node.js to use ports below 1024
      become: yes
      ansible.builtin.command: setcap 'cap_net_bind_service=+ep' /usr/local/bin/node
      args:
        creates: /usr/local/bin/node
      tags: web
